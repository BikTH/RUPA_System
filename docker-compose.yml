# RUPA App Copyright (C) 2024 
#version: '3.7'

services:
  wazuh.manager:
    image: wazuh/wazuh-manager:4.9.2
    hostname: wazuh.manager
    restart: always
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 655360
        hard: 655360
    ports:
      - "1514:1514" # Port de communication avec les agents Wazuh
      - "1515:1515" # Port for enrollment via automatic agent request.
      - "514:514/udp" # Port utilis√© pour recevoir les logs syslog de dispositif externe
      - "55000:55000" # for enrollment via Wazuh server API.
    environment:
      - INDEXER_URL=${INDEXER_URL}
      - INDEXER_USERNAME=${INDEXER_USERNAME}
      - INDEXER_PASSWORD=${INDEXER_PASSWORD}
      - FILEBEAT_SSL_VERIFICATION_MODE=${FILEBEAT_SSL_VERIFICATION_MODE}
      - SSL_CERTIFICATE_AUTHORITIES=${SSL_CERTIFICATE_AUTHORITIES}
      - SSL_CERTIFICATE=${SSL_CERTIFICATE}
      - SSL_KEY=${SSL_KEY}
      - API_USERNAME=${API_USERNAME}
      - API_PASSWORD=${API_PASSWORD}
    volumes:
      - wazuh_api_configuration:/var/ossec/api/configuration
      - wazuh_etc:/var/ossec/etc
      - wazuh_logs:/var/ossec/logs
      - wazuh_queue:/var/ossec/queue
      - wazuh_var_multigroups:/var/ossec/var/multigroups
      - wazuh_integrations:/var/ossec/integrations
      - wazuh_active_response:/var/ossec/active-response/bin
      - wazuh_agentless:/var/ossec/agentless
      - wazuh_wodles:/var/ossec/wodles
      - wazuh_shared:/var/ossec/etc/shared/
      - wazuh_decoders:/var/ossec/etc/decoders/
      - wazuh_rules:/var/ossec/etc/rules/
      - filebeat_etc:/etc/filebeat
      - filebeat_var:/var/lib/filebeat
      - ./wazuh/config/wazuh_indexer_ssl_certs/root-ca-manager.pem:/etc/ssl/root-ca.pem
      - ./wazuh/config/wazuh_indexer_ssl_certs/wazuh.manager.pem:/etc/ssl/filebeat.pem
      - ./wazuh/config/wazuh_indexer_ssl_certs/wazuh.manager-key.pem:/etc/ssl/filebeat.key
      # - ./wazuh/config/wazuh_cluster/wazuh_manager.conf:/wazuh-config-mount/etc/ossec.conf
      #- ./wazuh/config/wazuh_cluster/suricata_decoder.xml:/var/ossec/etc/decoders/local_decoder.xml
      # - ./wazuh/config/wazuh_cluster/wazuh_agent:/var/ossec/etc/shared/Suricata/
      # - ./wazuh/config/wazuh_cluster/suricata_rules.xml:/var/ossec/etc/rules/local_rules.xml
      # - data_suricata_logs:/var/log/rupa_suricata
    networks:
      - rupa-net

  wazuh.indexer:
    image: wazuh/wazuh-indexer:4.9.2
    hostname: wazuh.indexer
    restart: always
    ports:
      - "9500:9200"
    environment:
      - "OPENSEARCH_JAVA_OPTS=-Xms1g -Xmx1g"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - wazuh-indexer-data:/var/lib/wazuh-indexer
      - ./wazuh/config/wazuh_indexer_ssl_certs/root-ca.pem:/usr/share/wazuh-indexer/certs/root-ca.pem
      - ./wazuh/config/wazuh_indexer_ssl_certs/wazuh.indexer-key.pem:/usr/share/wazuh-indexer/certs/wazuh.indexer.key
      - ./wazuh/config/wazuh_indexer_ssl_certs/wazuh.indexer.pem:/usr/share/wazuh-indexer/certs/wazuh.indexer.pem
      - ./wazuh/config/wazuh_indexer_ssl_certs/admin.pem:/usr/share/wazuh-indexer/certs/admin.pem
      - ./wazuh/config/wazuh_indexer_ssl_certs/admin-key.pem:/usr/share/wazuh-indexer/certs/admin-key.pem
      - ./wazuh/config/wazuh_indexer/wazuh.indexer.yml:/usr/share/wazuh-indexer/opensearch.yml
      - ./wazuh/config/wazuh_indexer/internal_users.yml:/usr/share/wazuh-indexer/opensearch-security/internal_users.yml
    networks:
      - rupa-net

  wazuh.dashboard:
    image: wazuh/wazuh-dashboard:4.9.2
    hostname: wazuh.dashboard
    restart: always
    ports:
      - 4443:5601
    environment:
      - API_TIMEOUT=120000
      - INDEXER_USERNAME=${INDEXER_USERNAME}
      - INDEXER_PASSWORD=${INDEXER_PASSWORD}
      - WAZUH_API_URL=${WAZUH_API_URL}
      - DASHBOARD_USERNAME=${DASHBOARD_USERNAME}
      - DASHBOARD_PASSWORD=${DASHBOARD_PASSWORD}
      - API_USERNAME=${API_USERNAME}
      - API_PASSWORD=${API_PASSWORD}
    volumes:
      - ./wazuh/config/wazuh_indexer_ssl_certs/wazuh.dashboard.pem:/usr/share/wazuh-dashboard/certs/wazuh-dashboard.pem
      - ./wazuh/config/wazuh_indexer_ssl_certs/wazuh.dashboard-key.pem:/usr/share/wazuh-dashboard/certs/wazuh-dashboard-key.pem
      - ./wazuh/config/wazuh_indexer_ssl_certs/root-ca.pem:/usr/share/wazuh-dashboard/certs/root-ca.pem
      - ./wazuh/config/wazuh_dashboard/opensearch_dashboards.yml:/usr/share/wazuh-dashboard/config/opensearch_dashboards.yml
      - ./wazuh/config/wazuh_dashboard/wazuh.yml:/usr/share/wazuh-dashboard/data/wazuh/config/wazuh.yml
      - wazuh-dashboard-config:/usr/share/wazuh-dashboard/data/wazuh/config
      - wazuh-dashboard-custom:/usr/share/wazuh-dashboard/plugins/wazuh/public/assets/custom
    depends_on:
      - wazuh.indexer
    links:
      - wazuh.indexer:wazuh.indexer
      - wazuh.manager:wazuh.manager
    networks:
      - rupa-net

  wazuh.suricata:
    image: rupadante/suricata-wazuh:latest
    container_name: wazuh.suricata
    restart: always
    hostname: wazuh.suricata
    network_mode: "host"
    # ports:
    #   - 1520:1514
    cap_add:
      - NET_ADMIN
      - NET_RAW
      - SYS_NICE
    environment:
      PUID: ${PUID}
      PGID: ${PGID}
      WAZUH_MANAGER_IP: ${WAZUH_MANAGER_IP}
      INT_TO_LISTEN: ${INTERFACE_RESEAU}
    volumes:
      - data_wazuh-suricata_logs:/var/log/suricata
      - data_wazuh-suricata_rules-update:/var/lib/suricata
      - ./wazuh/config/wazuh_suricata:/etc/suricata
      - ./wazuh/config/wazuh_suricata/rules/local.rules:/var/lib/suricata/rules/local.rules
    command: /bin/bash -c "/var/ossec/bin/wazuh-control start && tail -f /dev/null"
    depends_on:
      - wazuh.dashboard

  evebox:
    image: jasonish/evebox:0.20.3
    container_name: evebox
    restart: unless-stopped
    ports:
      - "5636:5636"
    command: evebox server --data-directory /var/lib/evebox --config /etc/evebox.yaml  --sqlite /var/log/rupa_suricata/eve.json --disable-geoip
    volumes:
    - ./wazuh/config/evebox/evebox.yaml:/etc/evebox.yaml
    - evebox-data:/var/lib/evebox
    - data_wazuh-suricata_logs:/var/log/rupa_suricata
    networks:
      - rupa-net
    depends_on:
      - wazuh.suricata


  ############ REVERSE_PROXY + PORTAIL DE CONNEXION
  nginx:
    image: nginx:1.26.3
    container_name: nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./reverse_proxy/nginx/conf:/etc/nginx/conf.d
      - ./reverse_proxy/nginx/html:/usr/share/nginx/html
      - ./reverse_proxy/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - wazuh.dashboard
      - n8n
    networks:
      - rupa-net

  ########### N8N
  postgres:
    image: postgres:15
    container_name: n8n_postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - rupa-net
    depends_on:
      - wazuh.suricata

  n8n:
    image: n8nio/n8n:1.42.2
    container_name: n8n
    restart: unless-stopped
    ports:
      - "${N8N_PORT}:5678"
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
      - DB_POSTGRESDB_USER=${POSTGRES_USER}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_POSTGRESDB_SCHEMA=public

      - N8N_USER_MANAGEMENT_DISABLED=true
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD}

      - GENERIC_TIMEZONE=${GENERIC_TIMEZONE}
      - TZ=${TZ}

      - N8N_HOST=${N8N_HOST}
      - WEBHOOK_URL=${WEBHOOK_URL}
      - N8N_PATH=/n8n/
      - N8N_PROTOCOL=https

      - N8N_LOG_LEVEL=info
      - N8N_DIAGNOSTICS_ENABLED=false

      - N8N_EMAIL_MODE=${N8N_EMAIL_MODE}
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASS=${SMTP_PASS}
      - N8N_SMTP_SENDER=${N8N_SMTP_SENDER}
      - N8N_SMTP_SSL=${N8N_SMTP_SSL}
    volumes:
      - n8n_data:/home/node/.n8n
    networks:
      - rupa-net
    depends_on:
      - postgres

volumes:
  ###VOLUME WAZUH
  wazuh_api_configuration:
  wazuh_etc:
  wazuh_logs:
  wazuh_queue:
  wazuh_var_multigroups:
  wazuh_integrations:
  wazuh_active_response:
  wazuh_agentless:
  wazuh_wodles:
  wazuh_shared:
  wazuh_decoders:
  filebeat_etc:
  filebeat_var:
  wazuh-indexer-data:
  wazuh-dashboard-config:
  wazuh-dashboard-custom:
  data_wazuh-suricata_logs:
  data_wazuh-suricata_rules-update:
  wazuh_rules:
  ###VOLUMES SURICATA + ELK + EVEBOX
  evebox-data:
  data_e_data_elasticsearch:
  data_e_logs_elasticsearch:
  data_l_data_logstash:
  data_l_logs_logstash:
  # data_k_logs_kibana:
  # data_suricata_logs:
  # data_suricata_rules-update:
  ###VOLUMES N8N
  postgres_data:
  n8n_data:

networks:
  rupa-net:
    driver: bridge

  # rupa_portal:
  #   build: ./reverse_proxy/rupa_portal
  #   container_name: rupa_portal
  #   environment:
  #     - SECRET_KEY=E5ZF4G6H541Z05T424254213RF4EQR84fr2ref21e
  #   volumes:
  #     - ./reverse_proxy/rupa_portal:/app
  #   depends_on:
  #     - elk
  #     - wazuh.manager
  #   networks:
  #     - backend

  ########### SHUFFLE
  # frontend:
  #   image: ghcr.io/shuffle/shuffle-frontend:latest
  #   container_name: shuffle-frontend
  #   hostname: shuffle-frontend
  #   ports:
  #     - "${FRONTEND_PORT}:80"
  #     - "${FRONTEND_PORT_HTTPS}:443"
  #   networks:
  #     - rupa-net
  #   environment:
  #     - BACKEND_HOSTNAME=${BACKEND_HOSTNAME}
  #   restart: unless-stopped
  #   depends_on:
  #     - backend
  
  # backend:
  #   image: ghcr.io/shuffle/shuffle-backend:latest
  #   container_name: shuffle-backend
  #   hostname: ${BACKEND_HOSTNAME}
  #   # Here for debugging:
  #   ports:
  #     - "${BACKEND_PORT}:5001"
  #   networks:
  #     - rupa-net
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #     - ${SHUFFLE_APP_HOTLOAD_LOCATION}:/shuffle-apps:z
  #     - ${SHUFFLE_FILE_LOCATION}:/shuffle-files:z
  #   env_file: .env
  #   environment:
  #     #- DOCKER_HOST=tcp://docker-socket-proxy:2375
  #     - SHUFFLE_APP_HOTLOAD_FOLDER=${SHUFFLE_APP_HOTLOAD_FOLDER}
  #     - SHUFFLE_FILE_LOCATION=${SHUFFLE_FILE_LOCATION}
  #     - SHUFFLE_DEFAULT_USERNAME=${SHUFFLE_DEFAULT_USERNAME}
  #     - SHUFFLE_DEFAULT_PASSWORD=${SHUFFLE_DEFAULT_PASSWORD}
  #   restart: unless-stopped
  #   depends_on:
  #     - wazuh.suricata

  # orborus:
  #   image: ghcr.io/shuffle/shuffle-orborus:latest
  #   container_name: shuffle-orborus
  #   hostname: shuffle-orborus
  #   networks:
  #     - rupa-net
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   environment:
  #     - SHUFFLE_APP_SDK_TIMEOUT=300
  #     - SHUFFLE_ORBORUS_EXECUTION_CONCURRENCY=7 # The amount of concurrent executions Orborus can handle. 
  #     #- DOCKER_HOST=tcp://docker-socket-proxy:2375
  #     - ENVIRONMENT_NAME=${ENVIRONMENT_NAME}
  #     - BASE_URL=http://${OUTER_HOSTNAME}:5001
  #     #- DOCKER_API_VERSION=1.40
  #     - SHUFFLE_BASE_IMAGE_NAME=${SHUFFLE_BASE_IMAGE_NAME}
  #     - SHUFFLE_BASE_IMAGE_REGISTRY=${SHUFFLE_BASE_IMAGE_REGISTRY}
  #     - SHUFFLE_BASE_IMAGE_TAG_SUFFIX=${SHUFFLE_BASE_IMAGE_TAG_SUFFIX}
  #     - HTTP_PROXY=${HTTP_PROXY}
  #     - HTTPS_PROXY=${HTTPS_PROXY}
  #     - SHUFFLE_PASS_WORKER_PROXY=${SHUFFLE_PASS_WORKER_PROXY}
  #     - SHUFFLE_PASS_APP_PROXY=${SHUFFLE_PASS_APP_PROXY}
  #     - SHUFFLE_STATS_DISABLED=true
  #   restart: unless-stopped
  #   security_opt:
  #     - seccomp:unconfined
  #   depends_on:
  #     - wazuh.suricata

  # opensearch:
  #   image: opensearchproject/opensearch:2.14.0
  #   hostname: shuffle-opensearch
  #   container_name: shuffle-opensearch
  #   env_file: .env
  #   #deploy:
  #     #resources:
  #     #  limits:
  #     #    cpus: "1.0"
  #     #    memory: "2G"
  #   environment:
  #     - "OPENSEARCH_JAVA_OPTS=-Xms2048m -Xmx2048m" # minimum and maximum Java heap size, recommend setting both to 50% of system RAM
  #     - bootstrap.memory_lock=true
  #     - DISABLE_PERFORMANCE_ANALYZER_AGENT_CLI=true
  #     - cluster.initial_master_nodes=shuffle-opensearch
  #     - cluster.routing.allocation.disk.threshold_enabled=false
  #     - cluster.name=shuffle-cluster
  #     - node.name=shuffle-opensearch
  #     - node.store.allow_mmap=false
  #     - discovery.seed_hosts=shuffle-opensearch
  #     - OPENSEARCH_INITIAL_ADMIN_PASSWORD=${SHUFFLE_OPENSEARCH_PASSWORD}
  #   ulimits:
  #     memlock:
  #       soft: -1
  #       hard: -1
  #     nofile:
  #       soft: 65536 
  #       hard: 65536
  #   volumes:
  #     - ${DB_LOCATION}:/usr/share/opensearch/data:z
  #   ports:
  #     - 9400:9200
  #   networks:
  #     - rupa-net
  #   restart: unless-stopped
  #   depends_on:
  #     - wazuh.suricata



    ############ SURICATA ELK
  # suricata:
  #   image: jasonish/suricata:6.0.15
  #   container_name: suricata
  #   hostname: suricata
  #   network_mode: "host"
  #   restart: always
  #   cap_add:
  #     - NET_ADMIN
  #     - NET_RAW
  #     - SYS_NICE
  #   environment:
  #     PUID: ${PUID}
  #     PGID: ${PGID}
  #     #SURICATA_OPTIONS: /usr/bin/suricata -c suricata.yaml -s signatures.rules -i ${INTERFACE_RESEAU}
  #   command: -i ${INTERFACE_RESEAU}
  #   volumes:
  #     - data_suricata_logs:/var/log/suricata
  #     - data_suricata_rules-update:/var/lib/suricata
  #     - ./suricata_elk/suricata:/etc/suricata

  # elk:
  #   image: sebp/elk:8.14.1
  #   container_name: elk
  #   hostname: elk
  #   restart: always
  #   ports:
  #     # - "5601:5601" # kibana web interface
  #     - "9200:9200" # Elasticsearch JSON interface
  #     - "9300:9300" # Elasticsearch transport interface
  #     #- "5044:5044" # Logstash beats interface
  #     #- "5045:5045" # Logstash syslog interface
  #     #- "9600:9600" # Logstash API endpoint
  #   environment:
  #     - ELASTICSEARCH_START=1 #permet le d√©marrage d'√©lasticsearch
  #     - LOGSTASH_START=1 #permet le d√©marage de logstash
  #     - KIBANA_START=0 #emp√™che le d√©marage de kibana
  #   volumes:
  #     #DATA
  #     - data_e_data_elasticsearch:/var/lib/elasticsearch
  #     - data_l_data_logstash:/var/lib/logstash
  #     - data_wazuh-suricata_logs:/var/log/rupa_suricata
  #     - data_e_logs_elasticsearch:/var/log/elasticsearch
  #     - data_l_logs_logstash:/var/log/logstash
  #     # - data_k_logs_kibana:/var/log/kibana
  #     #CONFIG
  #     - ./suricata_elk/elk/e_config_elasticsearch:/etc/elasticsearch
  #     - ./suricata_elk/elk/l_config_logstash:/etc/logstash/conf.d
  #     # - ./suricata_elk/elk/k_config_kibana/conf:/opt/kibana/config
  #     # - ./suricata_elk/elk/k_config_kibana/lib:/var/lib/kibana 
  #   networks:
  #     - rupa-net


  ############ SSO_SERVER KEYCLOACK
#  keycloak:
#    image: quay.io/keycloak/keycloak:26.0.2
#    container_name: keycloak
#    environment:
#      - KC_HEALTH_ENABLED=true
#      - KC_METRICS_ENABLED=true
#      - KC_HTTP_ENABLED=true
#      - KC_HOSTNAME_STRICT_HTTPS=false
#      - KEYCLOAK_SSL_REQUIRED=none
#      - KC_HOSTNAME_STRICT_BACKCHANNEL=false
#      - KC_HOSTNAME=localhost
#      - KC_HOSTNAME_PORT=8080
#      - DB_VENDOR=postgres
#      - DB_ADDR=postgres
#      - DB_DATABASE=${DB_NAME} #keycloakdb
#      - DB_USER=${DB_USER} #keycloak
#      - DB_PASSWORD=${DB_PASSWORD} #keycloakdbpass
#      - KEYCLOAK_ADMIN=${KEYCLOAK_ADMIN} #admin
#      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD} #adminpass
#      - KEYCLOAK_USER=${KEYCLOAK_USER} #user
#      - KEYCLOAK_PASSWORD=${KEYCLOAK_USER_PASSWORD} #userpass
#      - KC_DB=postgres
#      - KC_DB_URL=jdbc:postgresql://postgres/keycloakdb
#      - KC_DB_USERNAME=${DB_USER} #keycloak
#      - KC_DB_PASSWORD=${DB_PASSWORD} #keycloakdbpass
#    ports:
#      - 8080:8080
#      - 9000:9000
#    depends_on:
#      - postgres
#    restart: unless-stopped
#    command: start
#    networks:
#      - keycloak_network
#
#  postgres:
#    image: postgres:16.1
#    container_name: postgres
#    environment:
#      - POSTGRES_DB=${DB_NAME} #keycloakdb
#      - POSTGRES_USER=${DB_USER} #keycloak
#      - POSTGRES_PASSWORD=${DB_PASSWORD} #keycloakdbpass
#    volumes:
#      - ${POSTGRES_DATA_PATH}:/var/lib/postgresql/data
#    restart: unless-stopped
#    networks:
#      - keycloak_network
  
  

