# RUPA App Copyright (C) 2024 
#version: '3.7'

services:

  ############ WAZUH
  wazuh.manager:
    image: wazuh/wazuh-manager:4.4.4
    hostname: wazuh.manager
    restart: always
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "512M"
        reservations:
          memory: "256M"
    ports:
      - "1514:1514"
      - "1515:1515"
      - "514:514/udp"
      - "55000:55000"
    environment:
      - INDEXER_URL=${INDEXER_URL}
      - INDEXER_USERNAME=${INDEXER_USERNAME}
      - INDEXER_PASSWORD=${INDEXER_PASSWORD}
      - FILEBEAT_SSL_VERIFICATION_MODE=${FILEBEAT_SSL_VERIFICATION_MODE}
      - SSL_CERTIFICATE_AUTHORITIES=${SSL_CERTIFICATE_AUTHORITIES}
      - SSL_CERTIFICATE=${SSL_CERTIFICATE}
      - SSL_KEY=${SSL_KEY}
      - API_USERNAME=${API_USERNAME}
      - API_PASSWORD=${API_PASSWORD}
    volumes:
      - wazuh_api_configuration:/var/ossec/api/configuration
      - wazuh_etc:/var/ossec/etc
      - wazuh_logs:/var/ossec/logs
      - wazuh_queue:/var/ossec/queue
      - wazuh_var_multigroups:/var/ossec/var/multigroups
      - wazuh_integrations:/var/ossec/integrations
      - wazuh_active_response:/var/ossec/active-response/bin
      - wazuh_agentless:/var/ossec/agentless
      - wazuh_wodles:/var/ossec/wodles
      - filebeat_etc:/etc/filebeat
      - filebeat_var:/var/lib/filebeat
      - ./wazuh/config/wazuh_indexer_ssl_certs/root-ca-manager.pem:/etc/ssl/root-ca.pem
      - ./wazuh/config/wazuh_indexer_ssl_certs/wazuh.manager.pem:/etc/ssl/filebeat.pem
      - ./wazuh/config/wazuh_indexer_ssl_certs/wazuh.manager-key.pem:/etc/ssl/filebeat.key
      - ./wazuh/config/wazuh_cluster/wazuh_manager.conf:/wazuh-config-mount/etc/ossec.conf
    networks:
      - wazuh-net

  wazuh.indexer:
    image: wazuh/wazuh-indexer:4.4.4
    hostname: wazuh.indexer
    restart: always
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: "1G"
    ports:
      - "9300:9200"
    environment:
      - "OPENSEARCH_JAVA_OPTS=-Xms1024m -Xmx1024m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - wazuh-indexer-data:/var/lib/wazuh-indexer
      - ./wazuh/config/wazuh_indexer_ssl_certs/root-ca.pem:/usr/share/wazuh-indexer/certs/root-ca.pem
      - ./wazuh/config/wazuh_indexer_ssl_certs/wazuh.indexer-key.pem:/usr/share/wazuh-indexer/certs/wazuh.indexer.key
      - ./wazuh/config/wazuh_indexer_ssl_certs/wazuh.indexer.pem:/usr/share/wazuh-indexer/certs/wazuh.indexer.pem
      - ./wazuh/config/wazuh_indexer_ssl_certs/admin.pem:/usr/share/wazuh-indexer/certs/admin.pem
      - ./wazuh/config/wazuh_indexer_ssl_certs/admin-key.pem:/usr/share/wazuh-indexer/certs/admin-key.pem
      - ./wazuh/config/wazuh_indexer/wazuh.indexer.yml:/usr/share/wazuh-indexer/opensearch.yml
      - ./wazuh/config/wazuh_indexer/internal_users.yml:/usr/share/wazuh-indexer/opensearch-security/internal_users.yml
    networks:
      - wazuh-net

  wazuh.dashboard:
    image: wazuh/wazuh-dashboard:4.4.4
    hostname: wazuh.dashboard
    restart: always
    ports:
      - 443:5601
    environment:
      - INDEXER_USERNAME=${INDEXER_USERNAME}
      - INDEXER_PASSWORD=${INDEXER_PASSWORD}
      - WAZUH_API_URL=${WAZUH_API_URL}
      - DASHBOARD_USERNAME=${DASHBOARD_USERNAME}
      - DASHBOARD_PASSWORD=${DASHBOARD_PASSWORD}
      - API_USERNAME=${API_USERNAME}
      - API_PASSWORD=${API_PASSWORD}
    volumes:
      - ./wazuh/config/wazuh_indexer_ssl_certs/wazuh.dashboard.pem:/usr/share/wazuh-dashboard/certs/wazuh-dashboard.pem
      - ./wazuh/config/wazuh_indexer_ssl_certs/wazuh.dashboard-key.pem:/usr/share/wazuh-dashboard/certs/wazuh-dashboard-key.pem
      - ./wazuh/config/wazuh_indexer_ssl_certs/root-ca.pem:/usr/share/wazuh-dashboard/certs/root-ca.pem
      - ./wazuh/config/wazuh_dashboard/opensearch_dashboards.yml:/usr/share/wazuh-dashboard/config/opensearch_dashboards.yml
      - ./wazuh/config/wazuh_dashboard/wazuh.yml:/usr/share/wazuh-dashboard/data/wazuh/config/wazuh.yml
    depends_on:
      - wazuh.indexer
    networks:
      - wazuh-net

  ############ SURICATA ELK
  suricata:
    image: jasonish/suricata:6.0.15
    container_name: suricata
    hostname: suricata
    network_mode: "host"
    restart: always
    cap_add:
      - NET_ADMIN
      - NET_RAW
      - SYS_NICE
    environment:
      PUID: ${PUID}
      PGID: ${PGID}
      #SURICATA_OPTIONS: /usr/bin/suricata -c suricata.yaml -s signatures.rules -i ${INTERFACE_RESEAU}
    command: -i ${INTERFACE_RESEAU}
    volumes:
      - ./suricata_elk/data/suricata/logs:/var/log/suricata
      - ./suricata_elk/data/suricata/update:/var/lib/suricata/update
      - ./suricata_elk/config/suricata/rules:/var/lib/suricata/rules
      - ./suricata_elk/config/suricata/conf:/etc/suricata

  elk:
    image: sebp/elk:8.14.1
    container_name: elk
    hostname: elk
    restart: always
    ports:
      - "5601:5601" # kibana web interface
      - "9200:9200" # Elasticsearch JSON interface
      #- "9300:9300" # Elasticsearch transport interface
      #- "5044:5044" # Logstash beats interface
      #- "5045:5045" # Logstash syslog interface
      #- "9600:9600" # Logstash API endpoint
    volumes:
      - ./suricata_elk/data/elk/e_data_elasticsearch:/var/lib/elasticsearch
      - ./suricata_elk/data/elk/l_data_logstash:/var/lib/logstash
      - ./suricata_elk/data/suricata:/var/log/rupa_suricata
      - ./suricata_elk/data/elk/e_logs_elasticsearch:/var/log/elasticsearch
      - ./suricata_elk/data/elk/l_logs_logstash:/var/log/logstash
      - ./suricata_elk/data/elk/k_logs_kibana:/var/log/kibana
      - ./suricata_elk/config/elk/e_config_elasticsearch:/etc/elasticsearch
      - ./suricata_elk/config/elk/l_config_logstash:/etc/logstash/conf.d
      #- ./suricata_elk/config/elk/l_config_logstash/03-local.conf:/etc/logstash/conf.d/03-input.conf
      - ./suricata_elk/config/elk/k_config_kibana/conf:/opt/kibana/config
      - ./suricata_elk/config/elk/k_config_kibana/lib:/var/lib/kibana  # Volume pour stocker les donn√©es persistantes de Kibana
      #- ./suricata_elk/config/elk/suricata-index-pattern.json:/tmp/suricata-index-pattern.json
    depends_on:
      - suricata
  

  ############ SSO_SERVER KEYCLOACK
#  keycloak:
#    image: quay.io/keycloak/keycloak:26.0.2
#    container_name: keycloak
#    environment:
#      - KC_HEALTH_ENABLED=true
#      - KC_METRICS_ENABLED=true
#      - KC_HTTP_ENABLED=true
#      - KC_HOSTNAME_STRICT_HTTPS=false
#      - KEYCLOAK_SSL_REQUIRED=none
#      - KC_HOSTNAME_STRICT_BACKCHANNEL=false
#      - KC_HOSTNAME=localhost
#      - KC_HOSTNAME_PORT=8080
#      - DB_VENDOR=postgres
#      - DB_ADDR=postgres
#      - DB_DATABASE=${DB_NAME} #keycloakdb
#      - DB_USER=${DB_USER} #keycloak
#      - DB_PASSWORD=${DB_PASSWORD} #keycloakdbpass
#      - KEYCLOAK_ADMIN=${KEYCLOAK_ADMIN} #admin
#      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD} #adminpass
#      - KEYCLOAK_USER=${KEYCLOAK_USER} #user
#      - KEYCLOAK_PASSWORD=${KEYCLOAK_USER_PASSWORD} #userpass
#      - KC_DB=postgres
#      - KC_DB_URL=jdbc:postgresql://postgres/keycloakdb
#      - KC_DB_USERNAME=${DB_USER} #keycloak
#      - KC_DB_PASSWORD=${DB_PASSWORD} #keycloakdbpass
#    ports:
#      - 8080:8080
#      - 9000:9000
#    depends_on:
#      - postgres
#    restart: unless-stopped
#    command: start
#    networks:
#      - keycloak_network
#
#  postgres:
#    image: postgres:16.1
#    container_name: postgres
#    environment:
#      - POSTGRES_DB=${DB_NAME} #keycloakdb
#      - POSTGRES_USER=${DB_USER} #keycloak
#      - POSTGRES_PASSWORD=${DB_PASSWORD} #keycloakdbpass
#    volumes:
#      - ${POSTGRES_DATA_PATH}:/var/lib/postgresql/data
#    restart: unless-stopped
#    networks:
#      - keycloak_network
  
  ############ SHUFFLE
  # frontend:
  #   image: ghcr.io/shuffle/shuffle-frontend:latest
  #   container_name: shuffle-frontend
  #   hostname: shuffle-frontend
  #   ports:
  #     - "${FRONTEND_PORT}:80"
  #     - "${FRONTEND_PORT_HTTPS}:443"
  #   networks:
  #     - shuffle
  #   environment:
  #     - BACKEND_HOSTNAME=${BACKEND_HOSTNAME}
  #   restart: unless-stopped
  #   depends_on:
  #     - backend
  
  # backend:
  #   image: ghcr.io/shuffle/shuffle-backend:latest
  #   container_name: shuffle-backend
  #   hostname: ${BACKEND_HOSTNAME}
  #   # Here for debugging:
  #   ports:
  #     - "${BACKEND_PORT}:5001"
  #   networks:
  #     - shuffle
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #     - ${SHUFFLE_APP_HOTLOAD_LOCATION}:/shuffle-apps:z
  #     - ${SHUFFLE_FILE_LOCATION}:/shuffle-files:z
  #   env_file: .env
  #   environment:
  #     #- DOCKER_HOST=tcp://docker-socket-proxy:2375
  #     - SHUFFLE_APP_HOTLOAD_FOLDER=/shuffle-apps
  #     - SHUFFLE_FILE_LOCATION=/shuffle-files
  #   restart: unless-stopped
  #   depends_on:
  #     - elk
  #     - wazuh.manager
  #     - wazuh.indexer

  # orborus:
  #   image: ghcr.io/shuffle/shuffle-orborus:latest
  #   container_name: shuffle-orborus
  #   hostname: shuffle-orborus
  #   networks:
  #     - shuffle
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #   environment:
  #     - SHUFFLE_APP_SDK_TIMEOUT=300
  #     - SHUFFLE_ORBORUS_EXECUTION_CONCURRENCY=7 # The amount of concurrent executions Orborus can handle. 
  #     #- DOCKER_HOST=tcp://docker-socket-proxy:2375
  #     - ENVIRONMENT_NAME=${ENVIRONMENT_NAME}
  #     - BASE_URL=http://${OUTER_HOSTNAME}:5001
  #     #- DOCKER_API_VERSION=1.40
  #     - SHUFFLE_BASE_IMAGE_NAME=${SHUFFLE_BASE_IMAGE_NAME}
  #     - SHUFFLE_BASE_IMAGE_REGISTRY=${SHUFFLE_BASE_IMAGE_REGISTRY}
  #     - SHUFFLE_BASE_IMAGE_TAG_SUFFIX=${SHUFFLE_BASE_IMAGE_TAG_SUFFIX}
  #     - HTTP_PROXY=${HTTP_PROXY}
  #     - HTTPS_PROXY=${HTTPS_PROXY}
  #     - SHUFFLE_PASS_WORKER_PROXY=${SHUFFLE_PASS_WORKER_PROXY}
  #     - SHUFFLE_PASS_APP_PROXY=${SHUFFLE_PASS_APP_PROXY}
  #     - SHUFFLE_STATS_DISABLED=true
  #   restart: unless-stopped
  #   security_opt:
  #     - seccomp:unconfined
  #   depends_on:
  #     - elk
  #     - wazuh.manager
  #     - wazuh.indexer

  # opensearch:
  #   image: opensearchproject/opensearch:2.14.0
  #   hostname: shuffle-opensearch
  #   container_name: shuffle-opensearch
  #   env_file: .env
  #   #deploy:
  #     #resources:
  #     #  limits:
  #     #    cpus: "1.0"
  #     #    memory: "2G"
  #   environment:
  #     - "OPENSEARCH_JAVA_OPTS=-Xms2048m -Xmx2048m" # minimum and maximum Java heap size, recommend setting both to 50% of system RAM
  #     - bootstrap.memory_lock=true
  #     - DISABLE_PERFORMANCE_ANALYZER_AGENT_CLI=true
  #     - cluster.initial_master_nodes=shuffle-opensearch
  #     - cluster.routing.allocation.disk.threshold_enabled=false
  #     - cluster.name=shuffle-cluster
  #     - node.name=shuffle-opensearch
  #     - node.store.allow_mmap=false
  #     - discovery.seed_hosts=shuffle-opensearch
  #     - OPENSEARCH_INITIAL_ADMIN_PASSWORD=${SHUFFLE_OPENSEARCH_PASSWORD}
  #   ulimits:
  #     memlock:
  #       soft: -1
  #       hard: -1
  #     nofile:
  #       soft: 65536 
  #       hard: 65536
  #   volumes:
  #     - ${DB_LOCATION}:/usr/share/opensearch/data:z
  #   ports:
  #     - 9400:9200
  #   networks:
  #     - shuffle
  #   restart: unless-stopped
  #   depends_on:
  #     - elk
  #     - wazuh.manager
  #     - wazuh.indexer

volumes:
  wazuh_api_configuration:
  wazuh_etc:
  wazuh_logs:
  wazuh_queue:
  wazuh_var_multigroups:
  wazuh_integrations:
  wazuh_active_response:
  wazuh_agentless:
  wazuh_wodles:
  filebeat_etc:
  filebeat_var:
  wazuh-indexer-data:

networks:
  wazuh-net:
    driver: bridge
  shuffle:
    driver: bridge
##  keycloak_network:
##    driver: bridge